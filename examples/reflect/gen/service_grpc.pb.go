// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package reflect

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ReflectClient is the client API for Reflect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReflectClient interface {
	// we will read the options of this method using reflection
	GetNoAnnotations(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Annotations, error)
	// we will read the options of this method using reflection
	GetAnnotations(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Annotations, error)
}

type reflectClient struct {
	cc grpc.ClientConnInterface
}

func NewReflectClient(cc grpc.ClientConnInterface) ReflectClient {
	return &reflectClient{cc}
}

func (c *reflectClient) GetNoAnnotations(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Annotations, error) {
	out := new(Annotations)
	err := c.cc.Invoke(ctx, "/reflect.Reflect/GetNoAnnotations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reflectClient) GetAnnotations(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Annotations, error) {
	out := new(Annotations)
	err := c.cc.Invoke(ctx, "/reflect.Reflect/GetAnnotations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReflectServer is the server API for Reflect service.
// All implementations must embed UnimplementedReflectServer
// for forward compatibility
type ReflectServer interface {
	// we will read the options of this method using reflection
	GetNoAnnotations(context.Context, *Empty) (*Annotations, error)
	// we will read the options of this method using reflection
	GetAnnotations(context.Context, *Empty) (*Annotations, error)
	mustEmbedUnimplementedReflectServer()
}

// UnimplementedReflectServer must be embedded to have forward compatible implementations.
type UnimplementedReflectServer struct {
}

func (*UnimplementedReflectServer) GetNoAnnotations(context.Context, *Empty) (*Annotations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNoAnnotations not implemented")
}
func (*UnimplementedReflectServer) GetAnnotations(context.Context, *Empty) (*Annotations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnnotations not implemented")
}
func (*UnimplementedReflectServer) mustEmbedUnimplementedReflectServer() {}

func RegisterReflectServer(s *grpc.Server, srv ReflectServer) {
	s.RegisterService(&_Reflect_serviceDesc, srv)
}

func _Reflect_GetNoAnnotations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReflectServer).GetNoAnnotations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reflect.Reflect/GetNoAnnotations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReflectServer).GetNoAnnotations(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reflect_GetAnnotations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReflectServer).GetAnnotations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reflect.Reflect/GetAnnotations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReflectServer).GetAnnotations(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Reflect_serviceDesc = grpc.ServiceDesc{
	ServiceName: "reflect.Reflect",
	HandlerType: (*ReflectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNoAnnotations",
			Handler:    _Reflect_GetNoAnnotations_Handler,
		},
		{
			MethodName: "GetAnnotations",
			Handler:    _Reflect_GetAnnotations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
